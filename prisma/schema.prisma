generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x", "debian-openssl-3.0.x", "linux-musl", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model bailleur {
  id                BigInt    @id @default(autoincrement())
  nom               String?   @db.VarChar(128)
  email             String    @db.VarChar(128)
  telephone         String    @db.VarChar(32)
  login             String    @db.VarChar(32)
  password          String    @db.VarChar(512)
  langue            String    @default("fr") @db.VarChar(32)
  data              Json      @default("{}")
  date_validation   DateTime?
  date_suspension   DateTime?
  date_creation     DateTime  @default(now())
  date_modification DateTime  @default(now())
  date_suppression  DateTime?
  biens             bien[]
  factures          facture[]

  @@map("bailleurs")
}

model bien {
  id                       BigInt     @id @default(autoincrement())
  id_bailleur              BigInt
  type                     String     @db.VarChar(64)
  surface                  String     @db.VarChar(255)
  titre                    String     @db.VarChar(1024)
  description              String     @db.VarChar(1024)
  adresse                  String     @db.VarChar(256)
  contact                  String?    @db.VarChar(256)
  statut                   String     @db.VarChar(64)
  prix                     Float      @default(0) @db.Real
  pcs_marge                Float      @default(0) @db.Real
  prix_client              Float      @default(0) @db.Real
  devise                   String     @default("eu") @db.VarChar(32)
  data                     Json       @default("{}")
  date_suspension_bailleur DateTime?
  date_validation          DateTime?
  date_suspension          DateTime?
  date_creation            DateTime   @default(now())
  date_modification        DateTime   @default(now())
  date_suppression         DateTime?
  bailleur                 bailleur   @relation(fields: [id_bailleur], references: [id], map: "bien_bailleur_id_fkey")
  locations                location[]
  planing                  planing[]

  photos                   photo[]  @relation("bien_photo")
  @@map("biens")
}

model langue {
  id                BigInt    @id @default(autoincrement())
  langue            String    @default("fr") @db.VarChar(32)
  label             String    @default("Fran√ßais") @db.VarChar(32)
  date_creation     DateTime  @default(now())
  date_modification DateTime  @default(now())
  date_suppression  DateTime?

  @@map("langues")
}

model location {
  id                BigInt        @id @default(autoincrement())
  id_bien           BigInt
  id_voyageur       BigInt
  id_facture        BigInt?
  prix              Float         @default(0) @db.Real
  prix_total        Float         @default(0) @db.Real
  pcs_marge         Float         @default(0) @db.Real
  prix_client       Float         @default(0) @db.Real
  devise            String        @default("eu") @db.VarChar(32)
  statut            Int           @default(0)
  data              Json          @default("{}")
  date_debut        DateTime      @default(now())
  date_fin          DateTime      @default(now())
  date_creation     DateTime      @default(now())
  date_modification DateTime      @default(now())
  date_suppression  DateTime?
  bien              bien          @relation(fields: [id_bien], references: [id], map: "location_bien_id_fkey")
  facture           facture?      @relation(fields: [id_facture], references: [id], onDelete: Restrict, map: "location_facture_id_fkey")
  voyageur          voyageur      @relation(fields: [id_voyageur], references: [id], map: "location_voyageur_id_fkey")
  transactions      transaction[]

  @@map("locations")
}

model photo {
  id                BigInt    @id @default(autoincrement())
  id_model          BigInt
  model             String    @db.VarChar(128)
  url               String    @db.VarChar(1024)
  date_creation     DateTime  @default(now())
  date_modification DateTime  @default(now())
  date_suppression  DateTime?

  bien              bien?     @relation("bien_photo", fields: [id_model], references: [id], map: "photo_bien_id_model_fkey")
  service           service?  @relation("service_photo", fields: [id_model], references: [id], map: "photo_service_id_model_fkey")
  @@map("photos")
}

model planing {
  id                BigInt    @id @default(autoincrement())
  id_bien           BigInt
  data              Json      @default("{}")
  statut            String?   @db.VarChar(32)
  date_debut        DateTime  @default(now())
  date_fin          DateTime  @default(now())
  date_creation     DateTime  @default(now())
  date_modification DateTime  @default(now())
  date_suppression  DateTime?
  bien              bien      @relation(fields: [id_bien], references: [id], map: "planing_bien_id_fkey")

  @@map("planing")
}

model prestataire {
  id                BigInt       @id @default(autoincrement())
  nom               String?      @db.VarChar(128)
  email             String       @db.VarChar(128)
  telephone         String       @db.VarChar(32)
  login             String       @db.VarChar(32)
  password          String       @db.VarChar(512)
  langue            String       @default("fr") @db.VarChar(32)
  data              Json         @default("{}")
  date_validation   DateTime?
  date_suspension   DateTime?
  date_creation     DateTime     @default(now())
  date_modification DateTime     @default(now())
  date_suppression  DateTime?
  factures          facture[]
  prestations       prestation[]

  @@map("prestataires")
}

model voyageur {
  id                BigInt     @id @default(autoincrement())
  nom               String?    @db.VarChar(128)
  email             String     @db.VarChar(128)
  telephone         String     @db.VarChar(32)
  login             String     @db.VarChar(32)
  password          String     @db.VarChar(512)
  langue            String     @default("fr") @db.VarChar(32)
  data              Json       @default("{}")
  date_suspension   DateTime?
  date_validation   DateTime?  @default(now())
  date_creation     DateTime   @default(now())
  date_modification DateTime   @default(now())
  date_suppression  DateTime?
  factures          facture[]
  locations         location[]
  services          service[]

  @@map("voyageurs")
}

model admin {
  id                BigInt    @id @default(autoincrement())
  nom               String?   @db.VarChar(128)
  email             String    @db.VarChar(128)
  telephone         String    @db.VarChar(32)
  login             String    @db.VarChar(32)
  password          String    @db.VarChar(512)
  langue            String    @default("fr") @db.VarChar(32)
  data              Json      @default("{}")
  date_creation     DateTime  @default(now())
  date_modification DateTime  @default(now())
  date_suppression  DateTime?

  @@map("admins")
}

model facture {
  id                BigInt       @id @default(autoincrement())
  id_facturation    BigInt?
  id_prestataire    BigInt?
  id_bailleur       BigInt?
  id_voyageur       BigInt?
  type              String       @default("location") @db.VarChar(32)
  prix              Float        @default(0) @db.Real
  total             Float        @default(0) @db.Real
  data              Json         @default("{}")
  date_creation     DateTime     @default(now())
  date_modification DateTime     @default(now())
  date_suppression  DateTime?
  bailleurs         bailleur?    @relation(fields: [id_bailleur], references: [id], onDelete: Restrict, map: "facture_bailleur_id_fkey")
  facturations      facturation? @relation(fields: [id_facturation], references: [id], onDelete: Restrict, map: "facture_facturation_id_fkey")
  prestataires      prestataire? @relation(fields: [id_prestataire], references: [id], onDelete: Restrict, map: "facture_prestataire_id_fkey")
  voyageurs         voyageur?    @relation(fields: [id_voyageur], references: [id], onDelete: Restrict, map: "facture_voyageur_id_fkey")
  locations         location[]
  prestations       prestation[]

  @@map("factures")
}

model prestation {
  id                           BigInt        @id @default(autoincrement())
  id_service                   BigInt
  id_prestataire               BigInt
  id_facture                   BigInt?
  prix_prestataire             Float         @default(0) @db.Real
  pcs_marge                    Float         @default(0) @db.Real
  prix_supplementaire          Float         @default(0) @db.Real
  date_prestation              DateTime?
  date_validation_voyageur     DateTime?
  date_validation_prestataire  DateTime?
  note                         Int           @default(0)
  remarque                     String?       @db.VarChar(512)
  statut                       Int           @default(0)
  data                         Json          @default("{}")
  date_suppression_admin       DateTime?
  date_suppression_voyageur    DateTime?
  date_suppression_prestataire DateTime?
  date_creation                DateTime      @default(now())
  date_modification            DateTime      @default(now())
  messages                     message[]
  facture                      facture?      @relation(fields: [id_facture], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "prestation_facture_id_fkey")
  prestataire                  prestataire   @relation(fields: [id_prestataire], references: [id], map: "prestation_prestataire_id_fkey")
  service                      service       @relation(fields: [id_service], references: [id], map: "prestation_service_id_fkey")
  transactions                 transaction[]

  @@map("prestations")
}

model service {
  id                        BigInt       @id @default(autoincrement())
  id_voyageur               BigInt
  label                     String?      @db.VarChar(1024)
  description               String?      @db.VarChar(2048)
  adresse                   String?      @db.VarChar(256)
  contact                   String?      @db.VarChar(256)
  prix_min                  Float?       @db.Real
  prix_max                  Float?       @db.Real
  statut                    Int          @default(0)
  remarque                  String?      @db.VarChar(512)
  data                      Json         @default("{}")
  date                      DateTime
  date_creation             DateTime     @default(now())
  date_realisation          DateTime?
  date_modification         DateTime     @default(now())
  date_admin_suppression    DateTime?
  date_voyageur_suppression DateTime?
  prestations               prestation[]
  voyageur                  voyageur     @relation(fields: [id_voyageur], references: [id], map: "services_voyageur_id_fkey")

  photos                   photo[]  @relation("service_photo")
  @@map("services")
}

model transaction {
  id                BigInt      @id @default(autoincrement())
  id_location       BigInt?
  id_prestation     BigInt?
  session_id        String?     @unique @db.VarChar(1024)
  session_status    String?     @db.VarChar(32)
  payment_intent    String?     @db.VarChar(1024)
  payment_status    String?     @db.VarChar(32)
  amount            Int         @default(0)
  url               String?     @db.VarChar(4096)
  data              Json        @default("{}")
  date_creation     DateTime    @default(now())
  date_expiration   DateTime?
  date_modification DateTime    @default(now())
  date_suppression  DateTime?
  location          location?   @relation(fields: [id_location], references: [id], onDelete: Cascade, map: "transaction_location_id_fkey")
  prestation        prestation? @relation(fields: [id_prestation], references: [id], onDelete: Cascade, map: "transaction_prestation_id_fkey")

  @@map("transactions")
}

model message {
  id                BigInt     @id(map: "message_pkey") @default(autoincrement())
  id_prestation     BigInt
  id_voyageur       BigInt?
  id_prestataire    BigInt?
  id_admin          BigInt?
  message           String?    @db.VarChar(1024)
  date_creation     DateTime   @default(now())
  date_modification DateTime   @default(now())
  date_suppression  DateTime?
  prestations       prestation @relation(fields: [id_prestation], references: [id], map: "message_prestation_id_fkey")

  @@map("messages")
}

model tarif {
  id                BigInt    @id @default(autoincrement())
  key               String    @db.VarChar(128)
  value             Float?    @default(10) @db.Real
  date_creation     DateTime  @default(now())
  date_modification DateTime  @default(now())
  date_suppression  DateTime?

  @@map("tarifs")
}

model facturation {
  id                BigInt    @id @default(autoincrement())
  type              String    @default("prestation") @db.VarChar(32)
  data              Json      @default("{}")
  date_debut        DateTime  @default(now())
  date_fin          DateTime  @default(now())
  date_creation     DateTime  @default(now())
  date_modification DateTime  @default(now())
  date_suppression  DateTime?
  factures          facture[]

  @@map("facturations")
}
